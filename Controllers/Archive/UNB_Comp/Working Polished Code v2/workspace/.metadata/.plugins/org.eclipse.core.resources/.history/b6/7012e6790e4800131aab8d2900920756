import net.java.games.input.Component;
import net.java.games.input.Controller;


public class remoteController implements Runnable {
	
	private static final int SELECT = 0;
	private static final int LEFT_STICK_PUSH = 1;
	private static final int RIGHT_STICK_PUSH = 2;
	private static final int START = 3;
	private static final int UP_D = 4;
	private static final int RIGHT_D = 5;
	private static final int DOWN_D = 6;
	private static final int LEFT_D = 7;
	private static final int L2_D = 8;
	private static final int R2_D = 9;
	private static final int L1_D = 10;
	private static final int R1_D = 11;
	private static final int GREEN_TRIANLGLE_D = 12;
	private static final int RED_CIRCLE_D = 13;
	private static final int BLUE_X_D = 14;
	private static final int PURPLE_SQUARE_D = 15;
	private static final int PS = 16;
	private static final int LEFT_HOR = 17;
	private static final int LEFT_VER = 18;
	private static final int RIGHT_HOR = 19;
	private static final int RIGHT_VER = 20;
	private static final int XZ_PLANE = 21;
	private static final int YZ_PLANE = 22;
	private static final int FACE = 23;
	private static final int UNKNOWN = 24;
	private static final int UP_A = 25;
	private static final int RIGHT_A = 26;
	private static final int DOWN_A = 27;
	private static final int LEFT_A = 28;
	private static final int L2_A = 29;
	private static final int R2_A = 30;
	private static final int L1_A = 31;
	private static final int R1_A = 32;
	private static final int GREEN_TRIANGLE_A = 33;
	private static final int RED_CIRCLE_A = 34;
	private static final int BLUE_X_A = 35;
	private static final int PURPLE_SQUARE_A = 36;
	
	private Controller controller;
	private Component[] cps;
	private SimpleWrite2 outwrite;
	private int mybyte;
	private int motorLeft;
	private int motorRight;
	
	
	remoteController(SimpleWrite2 writer, Controller ctr, int startbyte)
	{
		this.controller = ctr;
		this.outwrite = writer;
		this.mybyte = startbyte;
		System.out.println("Hello, My Name is " + ctr.getName());
	}
	
	
	public void run()
	{
		while(true)
		{
			//Get the current controller input and break it into components
			controller.poll();			
			cps = controller.getComponents();
			
			//Left Stick (Map vertical input to -100 to 100
			motorLeft = (int)(cps[LEFT_VER].getPollData()*100);
			
			//Respond to Left Stick/Motor
			if ((motorLeft <= 100) && (motorLeft > 80))
				outwrite.writeByte((byte)mybyte);
			else if ((motorLeft <= 80) && (motorLeft > 60))
				outwrite.writeByte((byte)(mybyte+1));
			else if ((motorLeft <= 60) && (motorLeft > 40))
				outwrite.writeByte((byte)(mybyte+2));
			else if ((motorLeft <= 40) && (motorLeft > 20))
				outwrite.writeByte((byte)(mybyte+3));
			else if ((motorLeft <= 20) && (motorLeft > 4))
				outwrite.writeByte((byte)(mybyte+4));
			else if ((motorLeft < -4) && (motorLeft >= -20))
				outwrite.writeByte((byte)(mybyte+5));
			else if ((motorLeft < -20) && (motorLeft >= -40))
				outwrite.writeByte((byte)(mybyte+6));
			else if ((motorLeft < -40) && (motorLeft >= -60))
				outwrite.writeByte((byte)(mybyte+7));
			else if ((motorLeft < -60) && (motorLeft >= -80))
				outwrite.writeByte((byte)(mybyte+8));
			else if ((motorLeft < -80) && (motorLeft >= 100))
				outwrite.writeByte((byte)(mybyte+9));
			
			//Right Stick (Map vertical input to -100 to 100)
			motorRight = (int)(cps[RIGHT_VER].getPollData()*100);
			
			//Respond to Right Stick/Motor
			if ((motorRight <= 100) && (motorRight > 80))
				outwrite.writeByte((byte)(mybyte+10));
			else if ((motorRight <= 80) && (motorRight > 60))
				outwrite.writeByte((byte)(mybyte+11));
			else if ((motorRight <= 60) && (motorRight > 40))
				outwrite.writeByte((byte)(mybyte+12));
			else if ((motorRight <= 40) && (motorRight > 20))
				outwrite.writeByte((byte)(mybyte+13));
			else if ((motorRight <= 20) && (motorRight > 4))
				outwrite.writeByte((byte)(mybyte+14));
			else if ((motorRight < -4) && (motorRight >= -20))
				outwrite.writeByte((byte)(mybyte+15));
			else if ((motorRight < -20) && (motorRight >= -40))
				outwrite.writeByte((byte)(mybyte+16));
			else if ((motorRight < -40) && (motorRight >= -60))
				outwrite.writeByte((byte)(mybyte+17));
			else if ((motorRight < -60) && (motorRight >= -80))
				outwrite.writeByte((byte)(mybyte+18));
			else if ((motorRight < -80) && (motorRight >= 100))
				outwrite.writeByte((byte)(mybyte+19));
			
			//Respond to Aux Motor1
			if (cps[L1_D].getPollData() == 1)
				outwrite.writeByte((byte)(mybyte+20));
			else if (cps[L2_D].getPollData() == 1)
				outwrite.writeByte((byte)(mybyte+21));
			
			//Respond to 
			if (cps[R1_D].getPollData() == 1)
				outwrite.writeByte((byte)(mybyte+22));
			else if (cps[R2_D].getPollData() == 1)
				outwrite.writeByte((byte)(mybyte+23));
		}
		
	}

}
